export declare class ListBuilder {
    definition: Array<any>;
    list: Array<any>;
    constructor(def?: Array<object>);
    /**
     * Sets the definition, checks that each node has an ID property.
     * @param {Array} def - the array of nodes to be set as the definition
     * @returns {Boolean} - returns false if one of the nodes doesn't have an id property
     */
    setDefinition(def: Array<object>): Boolean;
    /**
     * Adds a node to the list doesn't throw any exception, only returns true or false.
     * @param {object} node - The node to be added
     * @returns {Boolean} - true if the node has been added, false if the node hasn't been added
     */
    addFast(node: object): Boolean;
    /**
     * Adds a node to the list, this throws an error when an invalid node is added.
     * @param {object} node - The node to be added
     * @returns {Boolean} - true if the node has been added, false if the node hasn't been added
     * @throws {InvalidNodeError} - if the node that's trying to be added has no id field
     */
    addNode(node: object): Boolean;
    private add(node, throwError);
    /**
     * Removes the last node.
     */
    removeLastNode(): void;
    /**
     * Returns the set list.
     * @returns {any[]} - The list of objects you have created.
     */
    getList(): any[];
    /**
     * Resets list to empty array.
     */
    resetList(): void;
    /**
     * Returns the set defintion.
     * @returns {Array<any>} - returns the set defintion array. Empty array if none set.
     */
    getDefinition(): Array<any>;
    /**
     * Resets definition to empty array.
     */
    resetDefinition(): void;
}
